@page "/rrdrm2"

@inject NavigationManager NavigationManager
@inject IDataAccess db
@inject MyAppState MyAppState
@*<h4><span class="badge badge-info"> Kort Durumu & Rezervasyon </span></h4>*@

<div class="card">
		<h5 class="card-header">Kort Rezervasyon</h5>
		<div class="card-body">
				<DxFormLayout ItemSizeMode="SizeMode.Small">
						<DxFormLayoutItem Caption="Tarih" ColSpanMd="4">
								<Template>
										<DxDateEdit @bind-Date="@Trh"
																Format="dd.MM.yy"
																DisplayFormat="dddd dd.MM.yy"
																MinDate="@MinDate"
																MaxDate="@MaxDate"
																TimeSectionVisible="false"></DxDateEdit>
								</Template>
						</DxFormLayoutItem>

						<DxFormLayoutItem Caption="Kort" ColSpanMd="4" BeginRow="true">
								<Template>
										<DxComboBox @bind-Value="@KkID"
																NullText="Kort Seçin..."
																TextFieldName="Ad"
																ValueFieldName="KkID"
																FilteringMode="DataGridFilteringMode.Contains"
																Data="@dataKK" />
								</Template>
						</DxFormLayoutItem>

						<DxFormLayoutItem Caption="Saat" ColSpanMd="4">
								<Template>
										<DxComboBox @bind-Value="@BasZmn"
																DisplayFormat="HH:mm"
																FilteringMode="DataGridFilteringMode.StartsWith"
																Data="@dataBasZmn" />
								</Template>
						</DxFormLayoutItem>

						<DxFormLayoutItem Caption="Süre" ColSpanMd="4">
								<Template>
										@if (usrSkl == "U")
										{
												<DxComboBox @bind-Value="@Sure"
																		Data="@(new int[] { 60, 120 })" />
										}
										else
										{
												<DxComboBox @bind-Value="@Sure"
																		Data="@(new int[] { 60, 90, 120, 180, 240, 300 })" />
										}
								</Template>
						</DxFormLayoutItem>

						<DxFormLayoutItem ColSpanMd="2" BeginRow="true">
								<Template>
										<DxButton RenderStyle="ButtonRenderStyle.Warning" Click="@RrTalep" Text="Rezervasyon Talep" Enabled="TalepEnabled" />
								</Template>
						</DxFormLayoutItem>

						<DxFormLayoutItem Caption="Talep Sonucu" ColSpanMd="10">
								<Template>
										<DxTextBox Text='@TalepMsj' ReadOnly="true" />
								</Template>
						</DxFormLayoutItem>

				</DxFormLayout>
		</div>
</div>

<br />
@*<DxToolbarItem Text="@(Trh.ToString("dd.MM.yy dddd"))"*@

<br />

@if (dataView.Count > 0)
{

		<table class="table table-bordered table-hover table-sm">
				<thead class="thead-dark">
						<tr>
								<th style="width:50px"></th>
								@foreach (var H in dataHdr)
								{
										<th class="text-center"><b>@H.KkAd</b></th>
								}
						</tr>

				</thead>
				<tbody>
						@foreach (var Y in dataView)
						{
								<tr>
										@if (Y.Value.Zmn.Minute == 0)
										{
												<td class="text-center p-0" style="position: relative; top: -12px;"><span class="badge badge-info">@Y.Value.Zmn.ToString("HH:mm")</span></td>
										}
										else
										{
												<td class="text-center p-0" ><span class="badge badge-light" style="position: relative; top: -12px;">@Y.Value.Zmn.ToString("HH:mm")</span> </td>
										}
										@foreach (var X in Y.Value.RrID)
										{
												<td class="text-center p-0">
														@if (X.Value > 0)
														{
																<span class="btn btn-link btn-sm p-0" @onclick="@(e => RrKim(e, X.Value))">@X.Value.ToString("#")</span>
														}
												</td>
										}
								</tr>
						}
				</tbody>
		</table>

}


<DxPopup HeaderText="@RrInfoHdr"
				 @bind-Visible="@PopupVisible">
		<Content>
				<p>@((MarkupString)RrInfoContetnt)</p>
		</Content>
</DxPopup>

@code {
		bool PopupVisible { get; set; } = false;
		string RrInfoHdr = "";
		string RrInfoContetnt = "";

		private async Task RrKim(MouseEventArgs e, int vm)
		{
				string aaa = await db.LoadRec<string, dynamic>($"select RrInfo from RR_INFO({vm})", new { });

				RrInfoHdr = $"Rezervasyon# {vm}";
				RrInfoContetnt = aaa;
				PopupVisible = true;
		}

		private int AaID { get; set; }
		private int UuID { get; set; }

		List<KSmodel> dataKS;
		List<KKmodel> dataKK;

		Dictionary<int, RRdrm2ViewModel> dataView = new Dictionary<int, RRdrm2ViewModel>();
		List<RRdrm2HdrModel> dataHdr;
		List<RRdrm2Model> data;
		List<string> dataBasZmn;

		int DimX = 0;
		int DimY = 0;

		DateTime? iTrh;
		bool TalepEnabled = false;
		string TalepMsj = "";
		int TalepRrID = 0;
		string usrSkl = "";
		bool usrRrOK = false;

		RRdrmModel selectedRow;
		RRdrmModel SelectedRow
		{
				get { return selectedRow; }
				set
				{
						selectedRow = value;
						iTrh = selectedRow.Trh;
						if (selectedRow.NBK > 0 && usrRrOK)
								TalepEnabled = true;
						else
								TalepEnabled = false;
						StateHasChanged();
				}
		}

		DateTime trh;
		DateTime Trh
		{
				get { return trh; }
				set
				{
						trh = value;
						InvokeAsync(Read);
						InvokeAsync(StateHasChanged);
				}
		}
		DateTime MinDate { get; set; }
		DateTime MaxDate { get; set; }
		string BasZmn { get; set; }


		int KkID = 0;
		int KsID = 0;
		int Sure = 60;
		int Period = 60;

		async Task RrTalep()
		{
				dynamic p = new
				{
						AaID = AaID,
						UuID = UuID,
						Trh = SelectedRow.Trh,
						Sure = Sure,
						KsID = KsID,
				};

				string sql = $"select * from RR_TALEP(@AaID, @UuID,  @Trh, @Sure, @KsID)";
				RRtalepModel aaa = await db.LoadRec<RRtalepModel, dynamic>(sql, p);

				TalepRrID = aaa.RrID;
				TalepMsj = $"{aaa.Msj}";

				if (TalepRrID > 0)
						await Read();
				StateHasChanged();
		}

		async Task Read()
		{
				dynamic p = new
				{
						AaID = AaID,
						Trh = Trh
				};

				string sql = $"select * from RR_DRM_HDR(@AaID, @Trh)";
				dataHdr = await db.LoadData<RRdrm2HdrModel, dynamic>(sql, p);
				DimX = dataHdr.Count;
				DimY = dataHdr[0].DimY;

				sql = $"select * from RR_DRM(@AaID, @Trh)";
				var data = await db.LoadData<RRdrm2Model, dynamic>(sql, p);

				sql = $"select ZmnTxt from RR_TALEP_ZMNTXT(@AaID, @UuID, @Trh)";
				dataBasZmn = await db.LoadData<string, dynamic>(sql, new { AaID = AaID, UuID = UuID, Trh = Trh });
				BasZmn = dataBasZmn[0];

				RRdrm2ViewModel vm = null;
				dataView.Clear();
				// init dataView
				for (int y = 0; y < DimY; y++)
				{
						vm = new RRdrm2ViewModel();
						vm.RrID = new Dictionary<int, int>();
						for (int x = 0; x < DimX; x++)
						{
								vm.RrID.Add(x, -1);
						}

						dataView.Add(y, vm);
				}

				foreach (var d in data)
				{
						dataView[d.Y].Zmn = d.Zmn;
						dataView[d.Y].RrID[d.X] = d.RrID;
				}
		}

		protected override async Task OnInitializedAsync()
		{
				AaID = MyAppState.getAaID();
				UuID = MyAppState.getUsrID();
				usrSkl = MyAppState.getUsrSkl();
				usrRrOK = MyAppState.getUsrRrOK();

				//var aa = await db.LoadData<AAmodel, dynamic>($"select RzrMaxGun from AA where AaID = {AaID}", new { });
				//int RzrMaxGun = aa[0].RzrMaxGun;

				var aaRec = await db.LoadRec<AAmodel, dynamic>($"select RzrMaxGun from AA where AaID = {AaID}", new { });
				int RzrMaxGun = aaRec.RzrMaxGun;

				//Trh = DateTime.Today;
				//Trh = new DateTime(2020, 12, 12, 8, 0, 0);  // 11inde kayit var onu gormek icin, simdilik
				Trh = DateTime.Today;
				MinDate = Trh;
				if (usrSkl == "U")
						MaxDate = MinDate.AddDays(RzrMaxGun);
				else
						MaxDate = MinDate.AddYears(1);

				string sql = "";
				if (usrSkl == "A" || usrSkl == "Y" || usrSkl == "H")    // Admin, Yetkili, Hoca
						sql = $"select * from KS where AaID = {AaID} and Aktif = 1";
				else
						sql = $"select * from KS where AaID = {AaID} and UyeRzrOK = 1";

				dataKS = await db.LoadData<KSmodel, dynamic>(sql, new { });
				KsID = dataKS[0].KsID;

				dataKK = await db.LoadData<KKmodel, dynamic>($"select * from KK where AaID = {AaID}", new { });
				KkID = dataKK[0].KkID;

		}

}
